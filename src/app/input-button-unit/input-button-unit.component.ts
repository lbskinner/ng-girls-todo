import { Component, OnInit, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-input-button-unit',
  template: `
    <!-- We can store a reference to the element we want in a variable with the name we choose,
  for example inputElementRef, using a simple syntax - a hash -->
    <!-- keyup event has properties for more specific events -->
    <input
      #inputElementRef
      [value]="title"
      (keyup.enter)="submitValue($event.target.value)"
    />
    <button (click)="submitValue(inputElementRef.value)">Save</button>
  `,
  styleUrls: ['./input-button-unit.component.css'],
})

// onInit is an interface - a structure defined but not implemented as a class
// it defines which properties and/or methods should exits on the class that implements it
// OnInit is an interface for Angular Components which implement the method ngOnInit
// which is a component life-cycle method, Angular call s this menthod after component instance has been created
export class InputButtonUnitComponent implements OnInit {
  // each instance of the class has its own title property
  // can change the value of title in on instance but it remain the same in other instances
  // can declare a property without initializing it, ex. title: string; then assign a value at a later stage
  // when we declare and initialize it at the same time, type is inferred by TypeScript, so don't need to add type
  title = 'Hello World';
  constructor() {}

  // EventEmitter is a generic type - pass to it another type to use it internally
  @Output() submit: EventEmitter<string> = new EventEmitter();

  generateTitle(): string {
    return 'This title was generated by a method.';
  }

  submitValue(newTitle: string) {
    // emit the event to the parent component
    // things passed in emit() are available for the parent ast $event
    this.submit.emit(newTitle);
  }

  ngOnInit(): void {}
}
